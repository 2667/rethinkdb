sudo: true
dist: trusty
language: cpp
env:
  global:
    - EXTRA_CXX_FLAGS -fprofile-arcs -ftest-coverage  
notifications:
  email:
  - rebirthdb-dev@googlegroups.com

matrix:
  include:
    - stage: Build Base Docker Images
      name: Trusty Base Image 
      env: DISTRIBUTION=trusty
      install:
        - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
        - sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
        - sudo apt-get -qq update
        - sudo apt-get -y install docker-ce build-essential
      script:
        - ./configure CXXFLAGS="$CXX_FLAGS $EXTRA_CXX_FLAGS" --allow-fetch
        - make dist
        - tar xvzf build/packages/rebirthdb-$(eval "./scripts/gen-version.sh").tgz -C docker/$DISTRIBUTION --strip-components=1
        - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
        - cd docker/$DISTRIBUTION
        - docker build -t rebirthdb-$DISTRIBUTION --build-arg CXX_FLAGS="$CXX_FLAGS $EXTRA_CXX_FLAGS" .
        - docker images
        - docker tag rebirthdb-$DISTRIBUTION $DOCKER_USERNAME/rebirthdb-$DISTRIBUTION
        - docker push $DOCKER_USERNAME/rebirthdb-$DISTRIBUTION

    - name: Xenial Base Image
      env: DISTRIBUTION=xenial
      install:
        - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
        - sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
        - sudo apt-get -qq update
        - sudo apt-get -y install docker-ce build-essential
      script:
        - ./configure CXXFLAGS="$CXX_FLAGS $EXTRA_CXX_FLAGS" --allow-fetch
        - make dist
        - tar xvzf build/packages/rebirthdb-$(eval "./scripts/gen-version.sh").tgz -C docker/$DISTRIBUTION --strip-components=1
        - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
        - cd docker/$DISTRIBUTION
        - docker build -t rebirthdb-$DISTRIBUTION --build-arg CXX_FLAGS="$CXX_FLAGS $EXTRA_CXX_FLAGS" .
        - docker images
        - docker tag rebirthdb-$DISTRIBUTION $DOCKER_USERNAME/rebirthdb-$DISTRIBUTION
        - docker push $DOCKER_USERNAME/rebirthdb-$DISTRIBUTION

    - stage: Unit Tests
      name: Trusty Unit Tests
      env: DISTRIBUTION=trusty
      script:
        - docker run -d --name rebirthdb-$DISTRIBUTION $DOCKER_USERNAME/rebirthdb-$DISTRIBUTION sh -c "ping -i 30 0.0.0.0"
        - |
          docker exec rebirthdb-$DISTRIBUTION sh -c "\ 
          ./configure CXXFLAGS="$CXX_FLAGS" --allow-fetch && \
          make test -j $(($(nproc) + 1)) && \
          ./build/release/rebirthdb-unittest && \
          coveralls --gcov-options '\-lp'"
      after_success:
        - coveralls --gcov-options '\-lp'

    - name: Xenial Unit Tests
      env: DISTRIBUTION=xenial
      script:
        - docker run -d --name rebirthdb-$DISTRIBUTION $DOCKER_USERNAME/rebirthdb-$DISTRIBUTION sh -c "ping -i 30 0.0.0.0"
        - |
          docker exec rebirthdb-$DISTRIBUTION sh -c "\ 
          ./configure CXXFLAGS="$CXX_FLAGS" --allow-fetch && \
          make test -j $(($(nproc) + 1)) && \
          ./build/release/rebirthdb-unittest && \
          coveralls --gcov-options '\-lp'"
      after_success:
        - coveralls --gcov-options '\-lp'
    
    - stage: Package RebirthDB
      name: Trusty Packaging
      env: DISTRIBUTION=trusty
      script:
        - docker run -d --name rebirthdb-$DISTRIBUTION $DOCKER_USERNAME/rebirthdb-$DISTRIBUTION sh -c "ping -i 30 0.0.0.0"
        - |
          docker exec rebirthdb-$DISTRIBUTION sh -c \
          "./configure --allow-fetch && \
          make build-deb -j $(($(nproc) + 1)) UBUNTU_RELEASE=$DISTRIBUTION PACKAGE_BUILD_NUMBER=0"
      before_deploy:
        - sudo mkdir /rebirthdb/package
        - docker cp rebirthdb-$DISTRIBUTION:/rebirthdb/build/packages/*.deb /rebirthdb/package
      deploy:
        provider: bintray
        file: "docker/$DISTRIBUTION/descriptor.json"
        user: "$BINTRAY_USER"
        key: "$BINTRAY_API_KEY"
        skip_cleanup: true # to upload artifacts created during the build
        on: 
          all_branches: true
      
    - name: Xenial Packaging
      env: DISTRIBUTION=xenial
      script: 
        - docker run -d --name rebirthdb-$DISTRIBUTION $DOCKER_USERNAME/rebirthdb-$DISTRIBUTION sh -c "ping -i 30 0.0.0.0"
        - |
          docker exec rebirthdb-$DISTRIBUTION sh -c \
          "./configure --allow-fetch && \
          make build-deb -j $(($(nproc) + 1)) UBUNTU_RELEASE=$DISTRIBUTION PACKAGE_BUILD_NUMBER=0"
      before_deploy:
        - sudo mkdir /rebirthdb/package
        - docker cp rebirthdb-$DISTRIBUTION:/rebirthdb/build/packages/*.deb /rebirthdb/package
      deploy:
        provider: bintray
        file: "docker/$DISTRIBUTION/descriptor.json"
        user: "$BINTRAY_USER"
        key: "$BINTRAY_API_KEY"
        skip_cleanup: true # to upload artifacts created during the build
        on: 
          all_branches: true